{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestErrors.ts", "../../@hookform/resolvers/joi/src/joi.ts"],
  "sourcesContent": ["import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Ref,\n  ResolverOptions,\n  get,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  Field,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n  ResolverOptions,\n  get,\n  set,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n", "import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport type { ValidationError } from 'joi';\nimport { FieldError, appendErrors } from 'react-hook-form';\nimport { Resolver } from './types';\n\nconst parseErrorSchema = (\n  error: ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  error.details.length\n    ? error.details.reduce<Record<string, FieldError>>((previous, error) => {\n        const _path = error.path.join('.');\n\n        if (!previous[_path]) {\n          previous[_path] = { message: error.message, type: error.type };\n        }\n\n        if (validateAllFieldCriteria) {\n          const types = previous[_path].types;\n          const messages = types && types[error.type!];\n\n          previous[_path] = appendErrors(\n            _path,\n            validateAllFieldCriteria,\n            previous,\n            error.type,\n            messages\n              ? ([] as string[]).concat(messages as string[], error.message)\n              : error.message,\n          ) as FieldError;\n        }\n\n        return previous;\n      }, {})\n    : {};\n\nexport const joiResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n    },\n    resolverOptions = {},\n  ) =>\n  async (values, context, options) => {\n    const _schemaOptions = Object.assign({}, schemaOptions, {\n      context,\n    });\n\n    let result: Record<string, any> = {};\n    if (resolverOptions.mode === 'sync') {\n      result = schema.validate(values, _schemaOptions);\n    } else {\n      try {\n        result.value = await schema.validateAsync(values, _schemaOptions);\n      } catch (e) {\n        result.error = e;\n      }\n    }\n\n    if (result.error) {\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            result.error,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return {\n      errors: {},\n      values: result.value,\n    };\n  };\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "fields", "field", "refs", "forEach", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "path", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "set", "name", "some", "n", "startsWith", "joiResolver", "schema", "schemaOptions", "resolverOptions", "abortEarly", "values", "context", "options", "_temp3", "result", "error", "errors", "toNestErrors", "validateAllFieldCriteria", "shouldUseNativeValidation", "criteriaMode", "details", "length", "reduce", "previous", "_path", "path", "join", "message", "type", "types", "messages", "appendErrors", "concat", "validateFieldsNatively", "value", "_schemaOptions", "Object", "assign", "_temp2", "mode", "validate", "_temp", "_catch", "Promise", "resolve", "validateAsync", "then", "_schema$validateAsync", "e", "reject"]
}
