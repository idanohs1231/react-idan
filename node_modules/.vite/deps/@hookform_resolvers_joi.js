import {
  appendErrors,
  get,
  set
} from "./chunk-V4UMBVK3.js";
import "./chunk-Y5IW5QF7.js";
import "./chunk-UV5CTPV7.js";

// node_modules/@hookform/resolvers/dist/resolvers.mjs
var s = (e, s2, o2) => {
  if (e && "reportValidity" in e) {
    const r2 = get(o2, s2);
    e.setCustomValidity(r2 && r2.message || ""), e.reportValidity();
  }
};
var o = (t, e) => {
  for (const o2 in e.fields) {
    const r2 = e.fields[o2];
    r2 && r2.ref && "reportValidity" in r2.ref ? s(r2.ref, o2, t) : r2.refs && r2.refs.forEach((e2) => s(e2, o2, t));
  }
};
var r = (s2, r2) => {
  r2.shouldUseNativeValidation && o(s2, r2);
  const f = {};
  for (const o2 in s2) {
    const n2 = get(r2.fields, o2), a = Object.assign(s2[o2] || {}, { ref: n2 && n2.ref });
    if (i(r2.names || Object.keys(s2), o2)) {
      const s3 = Object.assign({}, get(f, o2));
      set(s3, "root", a), set(f, o2, s3);
    } else
      set(f, o2, a);
  }
  return f;
};
var i = (t, e) => t.some((t2) => t2.startsWith(e + "."));

// node_modules/@hookform/resolvers/joi/dist/joi.mjs
var n = function(n2, o2, a) {
  return void 0 === o2 && (o2 = { abortEarly: false }), void 0 === a && (a = {}), function(i2, s2, u) {
    try {
      var c = function() {
        return l.error ? { values: {}, errors: r((n3 = l.error, o3 = !u.shouldUseNativeValidation && "all" === u.criteriaMode, n3.details.length ? n3.details.reduce(function(e, r2) {
          var n4 = r2.path.join(".");
          if (e[n4] || (e[n4] = { message: r2.message, type: r2.type }), o3) {
            var a2 = e[n4].types, i3 = a2 && a2[r2.type];
            e[n4] = appendErrors(n4, o3, e, r2.type, i3 ? [].concat(i3, r2.message) : r2.message);
          }
          return e;
        }, {}) : {}), u) } : (u.shouldUseNativeValidation && o({}, u), { errors: {}, values: l.value });
        var n3, o3;
      }, v = Object.assign({}, o2, { context: s2 }), l = {}, f = function() {
        if ("sync" === a.mode)
          l = n2.validate(i2, v);
        else {
          var e = function(e2, r2) {
            try {
              var t = e2();
            } catch (e3) {
              return r2(e3);
            }
            return t && t.then ? t.then(void 0, r2) : t;
          }(function() {
            return Promise.resolve(n2.validateAsync(i2, v)).then(function(e2) {
              l.value = e2;
            });
          }, function(e2) {
            l.error = e2;
          });
          if (e && e.then)
            return e.then(function() {
            });
        }
      }();
      return Promise.resolve(f && f.then ? f.then(c) : c());
    } catch (e) {
      return Promise.reject(e);
    }
  };
};
export {
  n as joiResolver
};
//# sourceMappingURL=@hookform_resolvers_joi.js.map
